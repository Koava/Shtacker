/// <reference path="../display/DisplayObject.d.ts"/>

declare module createjs {

	//
	// Definition file for EaselJS-0.5.0
	//

	/**
	 * This is passed as the parameter to onPress, onMouseMove, onMouseUp, onMouseDown, onMouseOver, onMouseOut and onClick
	 * handlers on DisplayObject instances.
	 * @class MouseEvent
	 **/
	interface MouseEvent {

		// public properties:
		/**
		 * The normalized x position on the stage. This will always be within the range 0 to stage width.
		 * @property stageX
		 * @type Number
		*/
		stageX:number;

		/**
		 * The normalized y position on the stage. This will always be within the range 0 to stage height.
		 * @property stageY
		 * @type Number
		 **/
		stageY:number;

		/**
		 * The raw x position relative to the stage. Normally this will be the same as the stageX value, unless
		 * stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.
		 * @property rawX
		 * @type Number
		*/
		rawX: number;

		/**
		 * The raw y position relative to the stage. Normally this will be the same as the stageY value, unless
		 * stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.
		 * @property rawY
		 * @type Number
		*/
		rawY: number;

		/**
		 * The type of mouse event. This will be the same as the handler it maps to (onPress,
		 * onMouseDown, onMouseUp, onMouseMove, or onClick).
		 * @property type
		 * @type String
		 **/
		type:string;

		/**
		 * The native MouseEvent generated by the browser. The properties and API for this
		 * event may differ between browsers. This property will be null if the
		 * EaselJS property was not directly generated from a native MouseEvent.
		 * @property nativeEvent
		 * @type MouseEvent
		 * @default null
		 **/
		nativeEvent:MouseEvent;		

		/**
		 * For events of type "onPress" only you can assign a handler to the onMouseMove
		 * property. This handler will be called every time the mouse is moved until the mouse is released.
		 * This is useful for operations such as drag and drop.
		 * @event onMouseMove
		 * @param {MouseEvent} event A MouseEvent instance with information about the current mouse event.
		 **/
		onMouseMove:any;

		/**
		 * For events of type "onPress" only you can assign a handler to the onMouseUp
		 * property. This handler will be called every time the mouse is moved until the mouse is released.
		 * This is useful for operations such as drag and drop.
		 * @event onMouseUp
		 * @param {MouseEvent} event A MouseEvent instance with information about the current mouse event.
		*/
		onMouseUp:any;

		/**
		 * The display object this event relates to.
		 * @property target
		 * @type DisplayObject
		 * @default null
		*/
		target:DisplayObject;
		
		/**
		 * The unique id for the pointer (touch point or cursor). This will be either -1 for the mouse, or the system
		 * supplied id value.
		 * @property pointerID
		 * @type {Number}
		 */
		pointerID: number;

		/**
		 * Indicates whether this is the primary pointer in a multitouch environment. This will always be true for the mouse.
		 * For touch pointers, the first pointer in the current stack will be considered the primary pointer.
		 * @property primaryPointer
		 * @type {Boolean}
		 */
		primary: boolean;
		

		

		// constructor:
		/**
		* @constructor
		 * @param {String} type The event type.
		 * @param {Number} stageX The normalized x position relative to the stage.
		 * @param {Number} stageY The normalized y position relative to the stage.
		 * @param {DisplayObject} target The display object this event relates to.
		 * @param {MouseEvent} nativeEvent The native DOM event related to this mouse event.
		 * @param {Number} pointerID The unique id for the pointer.
		 * @param {Boolean} primary Indicates whether this is the primary pointer in a multitouch environment.
		 * @param {Number} rawX The raw x position relative to the stage.
		 * @param {Number} rawY The raw y position relative to the stage.
		 **/
		constructor(type:string, stageX:number, stageY:number, target:DisplayObject, nativeEvent:MouseEvent, pointerID:number, primary:boolean, rawX:number, rawY:number);		
		
		/**
		 * Returns a clone of the MouseEvent instance.
		 * @method clone
		 * @return {MouseEvent} a clone of the MouseEvent instance.
		 **/
		clone():MouseEvent;
		
		/**
		 * Returns a string representation of this object.
		 * @method toString
		 * @return {String} a string representation of the instance.
		 **/
		tostring():string;


		// TODO:  Check why setting the static vars doesn't compile??? Maybe because this is .d.ts file
		/*
		static onDoubleClick:string = "onDoubleClick";
		static MOUSE_PRESS:string = "onPress";
		static MOUSE_MOVE:string = "onMouseMove";
		static MOUSE_DOWN:string = "onMouseDown";
		static CLICK:string = "onClick";
		static MOUSE_OVER:string = "onMouseOver";
		static MOUSE_OUT:string = "onMouseOut";
		*/

	}

}